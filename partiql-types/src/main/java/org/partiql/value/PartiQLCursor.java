package org.partiql.value;

import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Iterator;
import org.jetbrains.annotations.NotNull;
import org.partiql.value.datetime.Date;
import org.partiql.value.datetime.Time;
import org.partiql.value.datetime.Timestamp;

/**
 * Data representing a database result set, which is usually generated by executing a statement that queries the database.
 * <p>
 * A {@link PartiQLCursor} object maintains a cursor pointing to its current position in the underlying data. Initially the
 * cursor is positioned before the first value. The {@link #next()} method moves the cursor to the next value. Please use
 * {@link #hasNext()} before calling {@link #next()}.
 *
 * @see PartiQLValueLoader#load(PartiQLCursor)
 * @see PartiQLValue
 */
public interface PartiQLCursor extends AutoCloseable, Iterator<PartiQLValueType> {

    @Override
    @NotNull
    PartiQLValueType next();

    /**
     * Positions the reader just before the contents of the current value, which must be a container (list, bag,
     * sexp, or struct). There's no current value immediately after stepping in, so the next thing you'll want to do is call
     * {@link #hasNext()} and {@link #next()} to move onto the first child value.
     * <p>
     * If the container itself is the null value, stepIn() shall fail. Please use {@link #isNullValue()} before
     * invoking this.
     * <p>
     * At any time {@link #stepOut()} may be called to move the cursor back to (just after) the parent value, even if
     * there are more children remaining.
     */
    public void stepIn();

    /**
     * Positions the iterator after the current parent's value, moving up one level in the data hierarchy. There's no
     * current value immediately after stepping out, so the next thing you'll want to do is call {@link #hasNext()} and
     * {@link #next()} to move onto the following value.
     */
    public void stepOut();

    /**
     * Determines whether the current value is a null value of any type (for example, null or null.int). It should be
     * called before calling getters that return value types (int, long, boolean, double).
     */
    public boolean isNullValue();

    /**
     * Determines whether the current value is the missing value. Similarly, one can invoke {@link #getType()}.
     */
    public boolean isMissingValue();

    /**
     * @return the type of the data at the cursor.
     */
    @NotNull
    public PartiQLValueType getType();

    /**
     * @return the field name of the current value; or null if there is no valid current value or if the current value
     * is not a field of a struct.
     */
    public String getFieldName();

    /**
     * This is only applicable when the current value's type is {@link PartiQLValueType#STRING}.
     */
    @NotNull
    String getStringValue();

    /**
     * This is only applicable when the current value's type is {@link PartiQLValueType#CHAR}.
     */
    @NotNull
    String getCharValue();

    /**
     * This is only applicable when the current value's type is {@link PartiQLValueType#SYMBOL}.
     */
    @NotNull
    String getSymbolValue();

    /**
     * This is only applicable when the current value's type is {@link PartiQLValueType#BOOL}.
     */
    public boolean getBoolValue();

    /**
     * This is only applicable when the current value's type is {@link PartiQLValueType#BINARY}.
     */
    public byte[] getBinaryValue();

    /**
     * This is only applicable when the current value's type is {@link PartiQLValueType#BLOB}.
     */
    public byte[] getBlobValue();

    /**
     * This is only applicable when the current value's type is {@link PartiQLValueType#CLOB}.
     */
    public byte[] getClobValue();

    /**
     * This is only applicable when the current value's type is {@link PartiQLValueType#BYTE}.
     */
    public byte getByteValue();

    /**
     * This is only applicable when the current value's type is {@link PartiQLValueType#DATE}.
     */
    @NotNull
    public Date getDateValue();

    /**
     * This is only applicable when the current value's type is {@link PartiQLValueType#TIME}.
     */
    @NotNull
    public Time getTimeValue();

    /**
     * This is only applicable when the current value's type is {@link PartiQLValueType#TIMESTAMP}.
     */
    @NotNull
    public Timestamp getTimestampValue();

    /**
     * This is only applicable when the current value's type is {@link PartiQLValueType#INTERVAL}.
     */
    @Deprecated
    public long getIntervalValue();

    /**
     * This is only applicable when the current value's type is {@link PartiQLValueType#INT8}.
     */
    public byte getInt8Value();

    /**
     * This is only applicable when the current value's type is {@link PartiQLValueType#INT16}.
     */
    public short getInt16Value();

    /**
     * This is only applicable when the current value's type is {@link PartiQLValueType#INT32}.
     */
    public int getInt32Value();

    /**
     * This is only applicable when the current value's type is {@link PartiQLValueType#INT64}.
     */
    public long getInt64Value();

    /**
     * This is only applicable when the current value's type is {@link PartiQLValueType#INT}.
     */
    @NotNull
    public BigInteger getIntValue();

    /**
     * This is only applicable when the current value's type is {@link PartiQLValueType#FLOAT32}.
     */
    public float getFloat32Value();

    /**
     * This is only applicable when the current value's type is {@link PartiQLValueType#FLOAT64}.
     */
    public double getFloat64Value();

    /**
     * This is only applicable when the current value's type is {@link PartiQLValueType#DECIMAL}.
     */
    @NotNull
    public BigDecimal getDecimalValue();

    /**
     * This is only applicable when the current value's type is {@link PartiQLValueType#DECIMAL_ARBITRARY}.
     */
    @NotNull
    public BigDecimal getDecimalArbitraryValue();

    /**
     * Converts a {@link PartiQLValue} into {@link PartiQLCursor}.
     */
    static PartiQLCursor of(PartiQLValue value) {
        return new PartiQLCursorDefault(value);
    }
}

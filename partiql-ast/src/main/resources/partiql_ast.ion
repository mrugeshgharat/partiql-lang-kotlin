imports::{
  kotlin: [
    ion::'com.amazon.ionelement.api.IonElement',
  ],
}

statement::[

  // PartiQL Expressions
  query::{
    expr: expr,
  },

  // Data Manipulation Language
  d_m_l::[

    // `INSERT INTO <target> [AS <alias>] ON CONFLICT <conflict action>
    // https://github.com/partiql/partiql-docs/blob/main/RFCs/0011-partiql-insert.md
    insert::{
      target:       target,
      value:        expr,
      on_conflict:  optional::on_conflict,
    },

    // `INSERT INTO <target> VALUE <expr> [AT <expr>]` [ON CONFLICT WHERE <expr> DO NOTHING]`
    insert_value::{
      target:       target,
      value:        expr,
      index:        optional::expr,
      on_conflict:  optional::on_conflict,
      returning:    optional::returning,
    },

    // UPSERT INTO <target> [<alias>] <expr>
    upsert::{
      target: '.expr.identifier',
      value:  expr,
    },

    // REPLACE INTO <target> [<alias>] value=expr;
    replace::{
      target: '.expr.identifier',
      value:  expr,
    },

    // `UPDATE <target> SET <set clause list> WHERE <expr>`
    update::{
      target:      target,
      assignments: list::[assignment],
      _: [
        assignment::{
          target: '.expr.path',
          value:  expr,
        },
      ],
    },

    // `REMOVE <path>`
    remove::{
      target: '.expr.path',
    },

    // `DELETE FROM <target table> WHERE <expr> RETURNING ...`
    delete::{
      from:       target,
      where:      optional::expr,
      returning:  optional::returning,
    },

    // TODO what is the target here?
    // `[UPDATE|FROM] <target> <dml base op>+ WHERE <expr> RETURNING <returning>`
    batch::{
      from:       from,
      ops:        list::[op],
      where:      optional::expr,
      returning:  optional::returning,
      _: [
        op::[
          set::{
            assignments: list::[assignment],
          },
          remove::{
            target: '.expr.path',
          },
          delete::{},
        ],
      ],
    },

    // <target table> ::= [ONLY] <table name>
    _::[
      target::{
        // temporary, change to path
        table: expr,
      },
    ],
  ],

  // Data Definition Language
  d_d_l::[

    // `CREATE TABLE <symbol> ( <table_def> )?`
    create_table::{
      name:       string,
      definition: optional::table_definition,
    },

    // `CREATE INDEX ON <symbol> (<expr> [, <expr>]...)`
    create_index::{
      name:       string,
      fields:     list::[expr],
    },

    // `DROP TABLE <identifier>`
    drop_table::{
      identifier: '.expr.identifier',
    },

    // DROP INDEX <identifier> ON <identifier>
    drop_index::{
      table:  '.expr.identifier',
      keys:   '.expr.identifier',
    },
  ],

  // EXEC <symbol> [<expr>.*]
  exec::{
    procedure: string,
    args: list::[expr],
  },

  // EXPLAIN
  explain::{
    target: [
      domain::{
        statement:  statement,
        type:       optional::string,
        format:     optional::string,
      },
    ],
  },
]

type::{
  identifier: string,
  parameters: list::[ion], // not recursive
}

// [ ALL | DISTINCT ]
set_quantifier::[
  ALL,
  DISTINCT,
]

case::[
  SENSITIVE,
  INSENSITIVE,
]

// PartiQL Expression
expr::[

  // The MISSING value
  missing::{},

  // Literal value
  lit::{
    value: ion,
  },

  // A variable reference
  identifier::{
    name:   string,
    case:   case,
    scope:  [ UNQUALIFIED, LOCALS_FIRST ],
  },

  // Path Expression
  path::{
    root: expr,
    steps: list::[step],
    _: [
      step::[
        index::{ key: expr, case: case },
        wildcard::{},
        unpivot::{},
      ],
    ],
  },

  // Scalar Function Call — for now, `function` is just a single identifier
  call::{
    function: string,
    args:     list::[expr],
  },

  // Aggregate Function Call
  agg::{
    function:   string,
    args:       list::[expr],
    quantifier: set_quantifier,
  },

  // A parameter `?`
  parameter::{
    index: int,
  },

  // Unary Operators
  unary::{
    op:   [ NOT, POS, NEG ],
    expr: expr,
  },

  // Binary Operators
  binary::{
    op: [
      PLUS, MINUS, TIMES, DIVIDE, MODULO, CONCAT,
      AND, OR,
      EQ, NE, GT, GTE, LT, LTE
    ],
    lhs: expr,
    rhs: expr,
  },

  // Collection Constructors
  collection::{
    type:   [ BAG, ARRAY, LIST, SEXP ], // syntax `<< >>`, `[ ]`, `[VALUES|LIST] ( )`, `SEXP ( )`
    values: list::[expr],
  },

  // Tuple Constructor
  tuple::{
    fields: list::[field],
    _: [
      field::{
        name:   expr,
        value:  expr,
      },
    ],
  },

  // Date Literal
  date::{
    year:   long,
    month:  long,
    day:    long,
  },

  // Time Literal
  time::{
    hour:               long,
    minute:             long,
    second:             long,
    nano:               long,
    precision:          long,
    tz_offset_minutes:  optional::long,
  },

  // The `like` SQL special form
  like::{
    value:    expr,
    pattern:  expr,
    escape:   optional::expr,
  },

  // The `between` SQL special form
  between::{
    value:  expr,
    from:   expr,
    to:     expr,
  },

  // The `in` SQL special form
  in_collection::{
    lhs: expr,
    rhs: expr,
  },

  // The `is` SQL special form
  is_type::{
    value:  expr,
    type:   '.type',
  },

  // The simple and searched `case` switch SQL special form F261-01, F261-02
  switch::{
    expr:     optional::expr,
    branches: list::[branch],
    default:  optional::expr,
    _: [
      branch::{
        condition:  expr,
        expr:       expr,
      },
    ],
  },

  // The `coalesce` SQL special form F261-04
  coalesce::{
    args: list::[expr],
  },

  // The `nullif` SQL special form F261-03
  null_if::{
    expr0: expr,
    expr1: expr,
  },

  // The `cast` SQL special form F201
  cast::{
    value:    expr,
    as_type:  '.type',
  },

  // The `can_cast` PartiQL special form
  can_cast::{
    value:    expr,
    as_type:  '.type',
  },

  // The `can_lossless_cast` PartiQL special form
  can_lossless_cast::{
    value:    expr,
    as_type:  '.type',
  },

  // The [INNER|OUTER] [UNION|INTERSECT|EXCEPT] PartiQL multiset special forms
  set::{
    op:         [ UNION, INTERSECT, EXCEPT ],
    quantifier: set_quantifier,
    outer:      bool,
    lhs:        expr,
    rhs:        expr,
  },

  // The PartiQL `sfw` query expression
  s_f_w::{
    select:   select,
    from:     from,
    let:      optional::let,
    where:    optional::expr,
    group_by: optional::group_by,
    having:   optional::expr,
    order_by: optional::order_by,
    limit:    optional::expr,
    offset:   optional::expr,
  },

  // GPML ( <expr> MATCH <pattern> )
  match::{
    expr:     expr,
    pattern:  graph_match,
  },

  // WINDOW
  window::{
    function: string,
    over:     over,
    args:     list::[expr],
  },
]

// PartiQL SELECT Clause Variants — https://partiql.org/dql/select.html
select::[

  // SELECT [ALL|DISTINCT] *
  star::{
    quantifier: set_quantifier,
  },

  // SELECT [ALL|DISTINCT] <select-list>
  project::{
    quantifier: set_quantifier,
    items: list::[item],
    _: [
      item::[
        all::{ expr: expr },                            // <expr>.*
        var::{ expr: expr, as_alias: optional::string } // <expr> [as <identifier>]
      ],
    ],
  },

  // PIVOT <expr> AT <expr>
  pivot::{
    value:  expr,
    key:    expr,
  },

  // SELECT [ALL|DISTINCT] VALUE <expr>
  value::{
    quantifier: set_quantifier,
    constructor: expr,
  },
]

// PartiQL FROM Clause Variants — https://partiql.org/dql/from.html
from::[

  // FROM [UNPIVOT] <expr> [AS <identifier>] [AT <identifier>] [BY <identifier>]
  collection::{
    expr:     expr,
    unpivot:  optional::bool,
    as_alias: optional::string,
    at_alias: optional::string,
    by_alias: optional::string,
  },

  // <from> JOIN [INNER|LEFT|RIGHT|FULL] <from> [ON <expr>]
  join::{
    type:       [ INNER, LEFT, RIGHT, FULL ],
    condition:  optional::expr,
    lhs:        from,
    rhs:        from,
  },
]

let::{
  bindings: list::[binding],
  _: [
    binding::{
      expr:     expr,
      as_alias: string,
    },
  ],
}

// GROUP BY Clause — https://partiql.org/dql/group_by.html
group_by::{
  strategy: [ FULL, PARTIAL ],
  keys:     list::[key],
  as_alias: optional::string,
  _: [
    key::{
      expr:     expr,
      as_alias: optional::string,
    },
  ],
}

// ORDER BY Clause — https://partiql.org/dql/order_by.html
order_by::{
  sorts: list::[sort],
  _: [
    sort::{
      expr:   expr,
      dir:    [ ASC, DESC ],
      nulls:  [ FIRST, LAST ],
    }
  ],
}

// TODO add SQL UNION to parser
union::{
  quantifier: set_quantifier,
  lhs:        '.expr.s_f_w',
  rhs:        '.expr.s_f_w',
}

// TODO add SQL INTERSECT to parser
intersect::{
  quantifier: set_quantifier,
  lhs:        '.expr.s_f_w',
  rhs:        '.expr.s_f_w',
}

// TODO add SQL EXCEPT to parser
except::{
  quantifier: set_quantifier,
  lhs:        '.expr.s_f_w',
  rhs:        '.expr.s_f_w',
}

// Graph Match Nodes — https://partiql.org/gpml/graph_query.html
graph_match::{
  patterns: list::[pattern],
  selector: optional::selector,

  _: [
    pattern::{
      restrictor: optional::restrictor,
      prefilter:  optional::expr,       // An optional pattern pre-filter, e.g.: `WHERE a.name=b.name` in `MATCH [(a)->(b) WHERE a.name=b.name]`
      variable:   optional::string,     // The optional element variable of the pattern, e.g.: `p` in `MATCH p = (a) −[t]−> (b)`
      quantifier: optional::quantifier, // An optional quantifier for the entire pattern match, e.g. `{2,5}` in `MATCH (a:Account)−[:Transfer]−>{2,5}(b:Account)`
      parts:      list::[part],         // The ordered pattern parts
      _: [
        part::[
          // A single node in a graph pattern
          node::{
            prefilter:  optional::expr,    // An optional node pre-filter, e.g.: `WHERE c.name='Alarm'` in `MATCH (c WHERE c.name='Alarm')`
            variable:   optional::string,  // The optional element variable of the node match, e.g.: `x` in `MATCH (x)`
            label:      list::[string],    // The optional label(s) to match for the node, e.g.: `Entity` in `MATCH (x:Entity)`
          },
          // A single edge in a graph pattern
          edge::{
            direction:  direction,            // Edge Direction
            quantifier: optional::quantifier, // An optional quantifier for the entire pattern match, e.g. `{2,5}` in `MATCH (a:Account)−[:Transfer]−>{2,5}(b:Account)`
            prefilter:  optional::expr,       // An optional edge pre-filter, e.g.: `WHERE t.capacity>100` in `MATCH −[t:hasSupply WHERE t.capacity>100]−>`
            variable:   optional::string,     // The optional element variable of the edge match, e.g.: `t` in `MATCH −[t]−>`
            label:      list::[string],       // The optional label(s) to match for the edge. e.g.: `Target` in `MATCH −[t:Target]−>`
          },
        ],
      ],
    },

    // Edge Direction           // | Orientation               | Edge pattern | Abbreviation |
    direction::[                // |---------------------------+--------------+--------------|
      LEFT,                     // | Pointing left             | <−[ spec ]−  | <−           |
      UNDIRECTED,               // | Undirected                | ~[ spec ]~   | ~            |
      RIGHT,                    // | Pointing right            | −[ spec ]−>  | −>           |
      LEFT_OR_UNDIRECTED,       // | Left or undirected        | <~[ spec ]~  | <~           |
      UNDIRECTED_OR_RIGHT,      // | Undirected or right       | ~[ spec ]~>  | ~>           |
      LEFT_OR_RIGHT,            // | Left or right             | <−[ spec ]−> | <−>          |
      LEFT_UNDIRECTED_OR_RIGHT, // | Left, undirected or right | −[ spec ]−   | −            |
    ],                          // Fig. 5 — https://arxiv.org/abs/2112.06217

    // Path Restrictor        // | Keyword        | Description
    restrictor::[             // |----------------+--------------
      TRAIL,                  // | TRAIL          | No repeated edges.
      ACYCLIC,                // | ACYCLIC        | No repeated nodes.
      SIMPLE,                 // | SIMPLE         | No repeated nodes, except that the ﬁrst and last nodes may be the same.
    ],                        // Fig. 7 — https://arxiv.org/abs/2112.06217

    // Graph Edge Quantifier (e.g., the `{2,5}` in `MATCH (x)->{2,5}(y)`)
    quantifier::{
      lower: long,
      upper: optional::long,
    },

    // Path Selector
    selector::[
      any_shortest::{},               // ANY SHORTEST
      all_shortest::{},               // ALL SHORTEST
      any::{},                        // ANY
      any_k::{ k: long },             // ANY k
      shortest_k::{ k: long },        // SHORTEST k
      shortest_k_group::{ k: long },  // SHORTEST k GROUP
    ],                                // Fig. 8 — https://arxiv.org/abs/2112.06217
  ],
}

// OVER ([PARTITION BY <expr> [, <expr>]... ] [ORDER BY <sort_spec> [, <sort_spec>]... ])
over::{
  partitions: list::[expr],
  sorts:      list::['.order_by.sort'],
}

// `ON CONFLICT WHERE <expr> <conflict_action>`
// `ON CONFLICT <conflict target> <conflict_action>`
on_conflict::{
  target: [
    condition::{ condition: expr },
    symbols::{ symbols: list::[string] },
    constraint::{ constraint: string },
  ],
  action: [
    do_replace::{ value: value },
    do_update::{ value: value },
    do_nothing::{},
  ],
  _: [
    value::[ EXCLUDED ],
  ],
}

// TODO consider `path` corresponding to parser rule pathSimple rather than expr.path

// RETURNING returningColumn ( COMMA returningColumn )*
returning::{
  columns: list::[column],
  _: [
    column::{
      status: [ MODIFIED, ALL ],
      age:    [ OLD, NEW ],
      value:  [
        wildcard::{},
        expression::{ expr: expr }
      ],
    },
  ],
}

// `<column_name> <type> <column_constraint>*`
// `( CONSTRAINT <column_constraint_name> )?  <column_constraint_def>`

table_definition::{
  columns: list::[column],
  _: [
    column::{
      name:        string,
      type:        '.type',
      constraints: list::[constraint],
      _: [
        // TODO improve modeling language to avoid these wrapped unions
        // Also, prefer not to nest more than twice
        constraint::{
          name: optional::string,
          body: [
            nullable::{},
            not_null::{},
            check::{ expr: expr },
          ],
        },
      ],
    },
  ],
}
